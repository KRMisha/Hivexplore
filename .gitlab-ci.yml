image: docker:20

stages:
    - format
    - lint
    - test
    - build
    - deploy

services:
    - docker:20-dind

variables:
    DOCKER_BUILDKIT: 1
    IMAGE_NAME: $CI_REGISTRY/polytechnique-montr-al/inf3995/20211/equipe-102/hivexplore

before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

# Client jobs

lint-client:
    stage: lint
    needs: [] # Workaround to start job even though we don't have a format job (lint-client takes care of checking formatting)
    script:
        - docker pull $IMAGE_NAME/client:ci || true
        - cd client
        - docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from $IMAGE_NAME/client:ci --target lint --tag $IMAGE_NAME/client:ci .
        - docker push $IMAGE_NAME/client:ci
    only:
        - master
        - merge_requests

test-client:
    stage: test
    needs: [lint-client]
    script:
        - docker pull $IMAGE_NAME/client:ci || true
        - cd client
        - docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from $IMAGE_NAME/client:ci --target test --tag $IMAGE_NAME/client:ci .
        - docker push $IMAGE_NAME/client:ci
    only:
        - master
        - merge_requests

build-client:
    stage: build
    needs: [test-client]
    script:
        - docker pull $IMAGE_NAME/client:ci || true
        - cd client
        - docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from $IMAGE_NAME/client:ci --tag $IMAGE_NAME/client:ci .
        - docker push $IMAGE_NAME/client:ci
    only:
        - master
        - merge_requests

deploy-client:
    stage: deploy
    needs: [build-client]
    script:
        - docker pull $IMAGE_NAME/client:ci || true
        - cd client
        - docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from $IMAGE_NAME/client:ci --tag $IMAGE_NAME/client:ci --tag $IMAGE_NAME/client:latest .
        - docker push $IMAGE_NAME/client:ci
        - docker push $IMAGE_NAME/client:latest
    only:
        - master

# Server jobs

format-server:
    stage: format
    script:
        - docker pull $IMAGE_NAME/server:ci || true
        - cd server
        - docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from $IMAGE_NAME/server:ci --target format --tag $IMAGE_NAME/server:ci .
        - docker push $IMAGE_NAME/server:ci
    only:
        - master
        - merge_requests

lint-server:
    stage: lint
    needs: [format-server]
    script:
        - docker pull $IMAGE_NAME/server:ci || true
        - cd server
        - docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from $IMAGE_NAME/server:ci --target lint --tag $IMAGE_NAME/server:ci .
        - docker push $IMAGE_NAME/server:ci
    only:
        - master
        - merge_requests

test-server:
    stage: test
    needs: [lint-server]
    script:
        - docker pull $IMAGE_NAME/server:ci || true
        - cd server
        - docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from $IMAGE_NAME/server:ci --target test --tag $IMAGE_NAME/server:ci .
        - docker push $IMAGE_NAME/server:ci
    only:
        - master
        - merge_requests

build-server:
    stage: build
    needs: [test-server]
    script:
        - docker pull $IMAGE_NAME/server:ci || true
        - cd server
        - docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from $IMAGE_NAME/server:ci --tag $IMAGE_NAME/server:ci .
        - docker push $IMAGE_NAME/server:ci
    only:
        - master
        - merge_requests

deploy-server:
    stage: deploy
    needs: [build-server]
    script:
        - docker pull $IMAGE_NAME/server:ci || true
        - cd server
        - docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from $IMAGE_NAME/server:ci --tag $IMAGE_NAME/server:ci --tag $IMAGE_NAME/server:latest .
        - docker push $IMAGE_NAME/server:ci
        - docker push $IMAGE_NAME/server:latest
    only:
        - master

# Drone jobs

format-drone:
    stage: format
    variables:
        GIT_SUBMODULE_STRATEGY: recursive
    script:
        - docker pull $IMAGE_NAME/drone:ci || true
        - cd drone
        - docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from $IMAGE_NAME/drone:ci --target format --tag $IMAGE_NAME/drone:ci .
        - docker push $IMAGE_NAME/drone:ci
    only:
        - master
        - merge_requests

build-drone:
    stage: build
    variables:
        GIT_SUBMODULE_STRATEGY: recursive
    needs: [format-drone]
    script:
        - docker pull $IMAGE_NAME/drone:ci || true
        - cd drone
        - docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from $IMAGE_NAME/drone:ci --tag $IMAGE_NAME/drone:ci .
        - docker push $IMAGE_NAME/drone:ci
    only:
        - master
        - merge_requests

deploy-drone:
    stage: deploy
    variables:
        GIT_SUBMODULE_STRATEGY: recursive
    needs: [build-drone]
    script:
        - docker pull $IMAGE_NAME/drone:ci || true
        - cd drone
        - docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from $IMAGE_NAME/drone:ci --tag $IMAGE_NAME/drone:ci --tag $IMAGE_NAME/drone:latest .
        - docker push $IMAGE_NAME/drone:ci
        - docker push $IMAGE_NAME/drone:latest
    only:
        - master

# ARGoS jobs

format-argos:
    stage: format
    script:
        - docker pull $IMAGE_NAME/argos:ci || true
        - cd argos
        - docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from $IMAGE_NAME/argos:ci --target format --tag $IMAGE_NAME/argos:ci .
        - docker push $IMAGE_NAME/argos:ci
    only:
        - master
        - merge_requests

build-argos:
    stage: build
    needs: [format-argos]
    script:
        - docker pull $IMAGE_NAME/argos:ci || true
        - cd argos
        - docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from $IMAGE_NAME/argos:ci --tag $IMAGE_NAME/argos:ci .
        - docker push $IMAGE_NAME/argos:ci
    only:
        - master
        - merge_requests

deploy-argos:
    stage: deploy
    needs: [format-argos]
    script:
        - docker pull $IMAGE_NAME/argos:ci || true
        - cd argos
        - docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from $IMAGE_NAME/argos:ci --tag $IMAGE_NAME/argos:ci --tag $IMAGE_NAME/argos:latest .
        - docker push $IMAGE_NAME/argos:ci
        - docker push $IMAGE_NAME/argos:latest
    only:
        - master
